/*
 * Created on 14 Apr 2015 ( Time 18:45:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.stories.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.stories.bean.Usertable;
import org.stories.bean.jpa.UsertableEntity;
import java.util.List;
import org.stories.business.service.mapping.UsertableServiceMapper;
import org.stories.data.repository.jpa.UsertableJpaRepository;
import org.stories.test.UsertableFactoryForTest;
import org.stories.test.UsertableEntityFactoryForTest;
import org.stories.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UsertableService
 */
@RunWith(MockitoJUnitRunner.class)
public class UsertableServiceImplTest {

	@InjectMocks
	private UsertableServiceImpl usertableService;
	@Mock
	private UsertableJpaRepository usertableJpaRepository;
	@Mock
	private UsertableServiceMapper usertableServiceMapper;
	
	private UsertableFactoryForTest usertableFactoryForTest = new UsertableFactoryForTest();

	private UsertableEntityFactoryForTest usertableEntityFactoryForTest = new UsertableEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String id = mockValues.nextString(20);
		
		UsertableEntity usertableEntity = usertableJpaRepository.findOne(id);
		
		Usertable usertable = usertableFactoryForTest.newUsertable();
		when(usertableServiceMapper.mapUsertableEntityToUsertable(usertableEntity)).thenReturn(usertable);

		// When
		Usertable usertableFound = usertableService.findById(id);

		// Then
		assertEquals(usertable.getId(),usertableFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<UsertableEntity> usertableEntitys = new ArrayList<UsertableEntity>();
		UsertableEntity usertableEntity1 = usertableEntityFactoryForTest.newUsertableEntity();
		usertableEntitys.add(usertableEntity1);
		UsertableEntity usertableEntity2 = usertableEntityFactoryForTest.newUsertableEntity();
		usertableEntitys.add(usertableEntity2);
		when(usertableJpaRepository.findAll()).thenReturn(usertableEntitys);
		
		Usertable usertable1 = usertableFactoryForTest.newUsertable();
		when(usertableServiceMapper.mapUsertableEntityToUsertable(usertableEntity1)).thenReturn(usertable1);
		Usertable usertable2 = usertableFactoryForTest.newUsertable();
		when(usertableServiceMapper.mapUsertableEntityToUsertable(usertableEntity2)).thenReturn(usertable2);

		// When
		List<Usertable> usertablesFounds = usertableService.findAll();

		// Then
		assertTrue(usertable1 == usertablesFounds.get(0));
		assertTrue(usertable2 == usertablesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Usertable usertable = usertableFactoryForTest.newUsertable();

		UsertableEntity usertableEntity = usertableEntityFactoryForTest.newUsertableEntity();
		when(usertableJpaRepository.findOne(usertable.getId())).thenReturn(null);
		
		usertableEntity = new UsertableEntity();
		usertableServiceMapper.mapUsertableToUsertableEntity(usertable, usertableEntity);
		UsertableEntity usertableEntitySaved = usertableJpaRepository.save(usertableEntity);
		
		Usertable usertableSaved = usertableFactoryForTest.newUsertable();
		when(usertableServiceMapper.mapUsertableEntityToUsertable(usertableEntitySaved)).thenReturn(usertableSaved);

		// When
		Usertable usertableResult = usertableService.create(usertable);

		// Then
		assertTrue(usertableResult == usertableSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Usertable usertable = usertableFactoryForTest.newUsertable();

		UsertableEntity usertableEntity = usertableEntityFactoryForTest.newUsertableEntity();
		when(usertableJpaRepository.findOne(usertable.getId())).thenReturn(usertableEntity);

		// When
		Exception exception = null;
		try {
			usertableService.create(usertable);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Usertable usertable = usertableFactoryForTest.newUsertable();

		UsertableEntity usertableEntity = usertableEntityFactoryForTest.newUsertableEntity();
		when(usertableJpaRepository.findOne(usertable.getId())).thenReturn(usertableEntity);
		
		UsertableEntity usertableEntitySaved = usertableEntityFactoryForTest.newUsertableEntity();
		when(usertableJpaRepository.save(usertableEntity)).thenReturn(usertableEntitySaved);
		
		Usertable usertableSaved = usertableFactoryForTest.newUsertable();
		when(usertableServiceMapper.mapUsertableEntityToUsertable(usertableEntitySaved)).thenReturn(usertableSaved);

		// When
		Usertable usertableResult = usertableService.update(usertable);

		// Then
		verify(usertableServiceMapper).mapUsertableToUsertableEntity(usertable, usertableEntity);
		assertTrue(usertableResult == usertableSaved);
	}

	@Test
	public void delete() {
		// Given
		String id = mockValues.nextString(20);

		// When
		usertableService.delete(id);

		// Then
		verify(usertableJpaRepository).delete(id);
		
	}

}
